---
title: Code-generation DLS with T4 (Text Templates)
published_on: 2009-09-06T11:12
published: false
categories: [T4, DSL, "Code Generation"]
---
Sometimes you have to write many repeatable code. Examples are data contracts for the web-services or data access layer or user interface. This often means writing dozens properties, classes ... borring ....

One of the solutions to this problem is code generation. In short words you are taking some data, make transformation and as output you are getting code file in your favorite language. In the following post I will describe code generation with T4 (Text Templates) and DSL(Domain Specific Language) that will be the input data.

### Problem

For demonstration purposes I will use the real problem form my ongoing work. We are working on very componentized system. Each component has its own deployment requirements. To make deployments as flexible as possible we use .NET Configuration. The only problem with .NET Configuration is fact that 80% of the custom `ConfigurationSection` code is useless. Looks like a lie? Well, to prove please view [here][1].  This is regular secion. Most of the stuff is dublicated. Anyway, let us return to problem.

So we need generate configuration section. The only data required as input is:

Name      |Type
---------|--------
Server    |string
Database|string
Username|string
Timeout  |int

As you may see, most of the attributes have type `string` so generator should assume `string` as default type.

### T4 

First of all we need empty T4 template (for details - ["T4 (Text Templates)"][2]. When done, we need to defined DSL.

### DSL

We will start with simple structure that holds support information like name of the .NET configuration section as well as list of the configuration attributes. Code worth a thousand words:

	public class Section{
		public string Name {get;set;}
		public IList<Property> Properties = new List<Property>();
	}
	public class Property{
		public string Name {get;set;}
	}
	
We need to embed this DSL to the template, to do this we will use `<#+ ... #>` section.  This is very similar to the `ASPX` code `<script runat="server"> ... </script>`.

Next step is target template.

### Target template

Next step is actual code generation.

### Template - Code Generation

T4 templates are simple text files with code includes.

Simple enough. Later we will use this structure to generate actual code.

	new Section
	{
		Namespace = "Community.Example",
		Name = "DataConnectionConfiguration",
		Path = "community/data",
		Properties = 
		{
			new Property{Name = "Server"}
	
		}
	}


[1]: http://github.com/chaliy/config_language/blob/71c8f6fc0b0eb2c3ae223aec05cda78f8afc4f9c/Example/DataConnection.cs
[2]: http://chaliy.name/blog/2009/9/t4_text_templates_the_beginning