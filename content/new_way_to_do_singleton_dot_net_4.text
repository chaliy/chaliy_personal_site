---
title: ".NET 4.0: The new way to implement lazy singleton"
published_on: 2009-10-13T17:12
published: false
categories: [".NET"]
keywords: [Singleton, ".NET 4.0", LazyInitializer]
description: Do you still have singletons? One of the new futures of the .NET 4.0 can help you. Take a look on the LazyInitializer.
---
Among other new stuff in upcoming .NET 4.0, I found **LazyInitislizer**. The idea is simple. Method accepts reference to the object, and in case it null, creates new one. So now your lazy singletons could look like the following:

	public class Stuff
    {
        private static Stuff _instanceStorage;
        public static Stuff Instance
        {
            get
            {
                LazyInitializer.EnsureInitialized(ref _instanceStorage);
                return _instanceStorage;
            }
        }
    }

This code will use default constructor in case _instanceStorage is null. Of course, EnsureInitialized has overrides that allow custom create. 

### What about .NET 3.5?

This stuff (with small changes) also awailable for .NET 3.5. They are part of the Parallel Extensions for .NET 3.5. The same example will look like the following:
	
	Code example goes here...

Enjoy!