---
title: Application Services, to be or not to be
published: false
published_on: 2009-08-29T12:10
---
This entry is dedicated for people who already use Application Services Pattern (most commonly referenced as [Service Layer Pattern][1]).

You are probaly aware about role Application Services layer plays in modern architectures. And I am aware. And this why Application Services Pattern was my default pattern for a long time. I used to use it with domain driven applications (DDD), data driven (with business logic in so called managers) and even in distributed, where logic was on the server. 

But, time is going and I started realizing that Application Services layer lacks its responsibility. Strong sign of this is when you do not know how to name tests for particular unit. In my case I was fail to name tests that just delegate calls from UI to Domain Services or just Domain objects. What tests should test? Call delegation? Level of abstraction? This all is not functional!

Anyway, let return back to Application Services. In last project used to use MVC pattern for UI part and DDD for domain logic. For wiring them together, we used what..? Yes. Application Services. Diagrams look cool. Good separation of layers. Looks great! But. Price of this is thousands of useless code. Useless tests. Useless mocks. Half of the code to implement use case was useless for this use case! Even worse, refactoring existing use cases are also hard. Imagine how much stuff you need just to add single argument to domain service?

So after hard thinking, we dropped Application Services. We decided to go the pragmatic way. When we will need it, we will implement it. But not earlier.

Responsibilities of the Application Services now spreated between controllers and domain services. *TBD*.

What I can suggest?

 1. If you feel that the only responsibility of the layer to delegate calls, drop this layer;
 2. If you feel that code is unnecessary, drop this code;
 3. *TBD*


[1]: http://martinfowler.com/eaaCatalog/serviceLayer.html